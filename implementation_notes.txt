TODO LIST:

ERROR INVESTIGATION NOTES:
	
CODE OVERVIEW:
	Program can be run normally for a 2-player human game, or with command line arguments 0-2 to specify the number of human players.
	Running with 3 will lead to an algorithmic trial setting; The program will expect a directory full of GameState files, which can be generated by the "utility" module. 

	Alpha-Beta Approach requires a tree, where nodes are a game-state, and each Move-request is a branch.
	Moves (branches) are created in bulk, but only evaluated into future game-states as needed in order to save on memory, and computational load. All moves generated should be valid in game rules by design; In special cases where no moves can be found, the game will check for "extinction" edge cases, and if no explanation is found, will end in error during algorithmic testing, and crash in a human game. (This is awaiting a bug fix)
	In the code, the defender is considered the maximizer.

FILE ORGANIZATION:
	main.rs : Collect & Organize game parameters
		  Call appropriate game run function
	lib.rs : GameState Management
		 
	utilities.rs : Human interface features, functions external to gameplay, Data Output/Saving
	game_organization.rs : Turn-based game logic for human and/or algorithmic players, as well as testing algorithmic players.
		       

	->player
		mod.rs: Standard organization for alpha-beta players, and a small test module for movement associated functions.
		game_evaluation.rs: code associated with assessing GameState objects for favorability to the defender.