TODO LIST:
	-Ensure Ruleset compliances (published on isis)
	-Write automated comparative testing for evaluations on randomized boards
	-Prevent gameplay looping
	

TODO'S COMPLETED SINCE LAST REPORT:
	-Vastly faster move generation (verification side-step)
	-Minor optimization in move validation function & get_neighbor
	-Implement "Hostile Empty Spaces" (Double check for correctness)
	-Add concise "board peeking" for evaluation and encirclement evaluations

ERROR INVESTIGATION NOTES:
	-LINE 126 in MOD.rs: Confirm the indices of the secondary check in the "or"operator, this will be very hard to track otherwise
	-"Move Shadowing" Vertical and horizontal moves begin generated at the same time is breaking somehow; only the first set in the loop executes...

	
CODE OVERVIEW:
	Program can be run normally for a 2-player human game, or with command line arguments 0-2 to specify the number of human players.

	Alpha-Beta Approach requires a tree, where nodes are a game-state, and each Move-request is a branch.
	The tree is generated ONLY as needed to lower memory use, and save computation on tree generation whenever ab-search allows pruning.
	In the code, the defender is considered the maximizer.
	Consider the fq_game_update returning a king-capture bool to prevent yada yada


FILE ORGANIZATION:
	main.rs : Collect & Organize game parameters
		  Call appropriate game run function
	lib.rs : GameState Management
		 (In the future?)Data Output/Saving
	utilities.rs : Human interface features
	game_organization.rs : Turn-based game logic for human and/or algorithmic players.
		       

	->player
		mod.rs: Standard organization for alpha-beta players
			Potential Movement iterator
		(In the future?)eval(x).rs: Single-use evaluation of game-state to value