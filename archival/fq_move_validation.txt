    fn fq_move_validation(&self, request: &MoveRequest) -> bool {
        //"Fast quiet" move validation, for algorithmic players; check an out of bounds condition, then if target is empty.
        //REQUIREMENTS: Piece exists, magnitude is non-zero, belongs to active player, all moves in same direction of lower magnitude are valid
    
        let int_pos: u8;
        match request.direction {
            Direction::U => {
                if request.position < (self.sizen * request.magnitude) {return false}
                // let oob: i32 = (request.position as i32) - ((self.sizen * request.magnitude)as i32);
                // if oob < 0 {return false}//Movement goes out of bounds above board
                int_pos = request.position - (self.sizen * request.magnitude);
            },
            Direction::D => {
                let oob = request.position + (self.sizen * request.magnitude);
                if oob > ((self.sizen * self.sizen) - 1) {return false} //Movement goes out of bounds beneath the board
                int_pos = request.position + (self.sizen * request.magnitude);
            },
            Direction::L => {
                if request.position < request.magnitude || (request.position/self.sizen) > ((request.position - request.magnitude)/self.sizen) {return false}
                // let oob: i32 = (request.position as i32) - (request.magnitude as i32);
                // if oob < 0 || (request.position as i32)/(self.sizen as i32) > oob/(self.sizen as i32) {return false} //Movement wraps past left bound
                int_pos = request.position - request.magnitude;
            },
            Direction::R => {
                let oob = request.position + request.magnitude;
                if oob/self.sizen > request.position/self.sizen {return false} //Movement wraps past right bound
                int_pos = request.position + request.magnitude;
            }
        }
        if self.board.contains_key(&int_pos) {return false}

        if *self.board.get(&request.position).unwrap() != Piece::King {
            if int_pos == self.throne || self.corners.contains(&int_pos) {return false}
        }
        true
    }
